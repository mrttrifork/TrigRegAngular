/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.trifork.trireg.server.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.trifork.trireg.server.model.DefaultCreateResponse;
import com.trifork.trireg.server.model.DefaultDeleteResponse;
import com.trifork.trireg.server.model.DefaultUpdateResponse;
import java.time.LocalDate;
import com.trifork.trireg.server.model.OverviewPeriod;
import com.trifork.trireg.server.model.TimeRegistrationAssociateTaskRequest;
import com.trifork.trireg.server.model.TimeRegistrationRequest;
import com.trifork.trireg.server.model.TimeRegistrationResponse;
import com.trifork.trireg.server.model.TimeRegistrationUpdateRequest;
import com.trifork.trireg.server.model.TimeRegistrationsByTaskResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-21T22:43:49.173986300+02:00[Europe/Copenhagen]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "TimeRegistration", description = "Tag for CRUD operations related to time registrations")
public interface TimeRegistrationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /time-registration/bulk
     * Add several time registrations for a user
     *
     * @param timeRegistrationRequest A JSON object containing a list of time registration information (required)
     * @return Time registrations added successfully (status code 201)
     *         or Failed creating one or more time registrations - if one time registration failed, no time registration is saved (status code 400)
     *         or JWT is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "addBulkTimeRegistrationForUser",
        description = "Add several time registrations for a user",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Time registrations added successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DefaultCreateResponse.class))),
                @Content(mediaType = "text/plain", array = @ArraySchema(schema = @Schema(implementation = DefaultCreateResponse.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Failed creating one or more time registrations - if one time registration failed, no time registration is saved", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/time-registration/bulk",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<DefaultCreateResponse>> addBulkTimeRegistrationForUser(
        @Parameter(name = "TimeRegistrationRequest", description = "A JSON object containing a list of time registration information", required = true) @Valid @RequestBody List<@Valid TimeRegistrationRequest> timeRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 12345, \"status\" : \"The data was created successfully\" }, { \"id\" : 12345, \"status\" : \"The data was created successfully\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /time-registration
     * Adds a time registration for a user
     *
     * @param timeRegistrationRequest A JSON object containing time registration information (required)
     * @return Time registration added successfully (status code 201)
     *         or JWT is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "addTimeRegistrationForUser",
        description = "Adds a time registration for a user",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Time registration added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultCreateResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/time-registration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DefaultCreateResponse> addTimeRegistrationForUser(
        @Parameter(name = "TimeRegistrationRequest", description = "A JSON object containing time registration information", required = true) @Valid @RequestBody TimeRegistrationRequest timeRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 12345, \"status\" : \"The data was created successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /time-registration/associate-task
     * Associates a time registration - that currently does not have any task associated - to the specified task. Also accepts tags that may be required to make a valid time registration for the specified task. 
     *
     * @param timeRegistrationAssociateTaskRequest  (required)
     * @return associated (status code 200)
     *         or Bad associate request (status code 400)
     *         or JWT is missing or invalid (status code 401)
     *         or Time registration not found (status code 404)
     */
    @Operation(
        operationId = "associateTimeRegistrationWithTask",
        description = "Associates a time registration - that currently does not have any task associated - to the specified task. Also accepts tags that may be required to make a valid time registration for the specified task. ",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "associated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultUpdateResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = DefaultUpdateResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad associate request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Time registration not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/time-registration/associate-task",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DefaultUpdateResponse> associateTimeRegistrationWithTask(
        @Parameter(name = "TimeRegistrationAssociateTaskRequest", description = "", required = true) @Valid @RequestBody TimeRegistrationAssociateTaskRequest timeRegistrationAssociateTaskRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 12345, \"status\" : \"The data was updated successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /time-registration
     * Deletes the specified time registration
     *
     * @param timeRegistrationId The id of the time registration to delete (required)
     * @return deleted (status code 200)
     *         or Bad delete request (status code 400)
     *         or JWT is missing or invalid (status code 401)
     *         or Time registration not found (status code 404)
     */
    @Operation(
        operationId = "deleteTimeRegistration",
        description = "Deletes the specified time registration",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultDeleteResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = DefaultDeleteResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad delete request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Time registration not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/time-registration",
        produces = { "application/json", "text/plain" }
    )
    
    default ResponseEntity<DefaultDeleteResponse> deleteTimeRegistration(
        @NotNull @Parameter(name = "timeRegistrationId", description = "The id of the time registration to delete", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeRegistrationId", required = true) Long timeRegistrationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 12345, \"status\" : \"The data was deleted successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /time-registration/active-task
     * Returns time registrations for a user grouped by task
     *
     * @param date The date to consider when fetching active tasks and time registrations (required)
     * @param period The time period to use when deciding in which time period tasks are considered active. Defaults to &#39;WEEK&#39;.  (optional)
     * @param extraTasks An optional collection of extra tasks to include in the response, regardless of whether they are active or not (optional)
     * @return List of time registrations for the user grouped by task (status code 200)
     *         or Request contains an invalid time period value (status code 400)
     *         or JWT is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getTaskTimeRegistrationsOverview",
        description = "Returns time registrations for a user grouped by task",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of time registrations for the user grouped by task", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimeRegistrationsByTaskResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = TimeRegistrationsByTaskResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request contains an invalid time period value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/time-registration/active-task",
        produces = { "application/json", "text/plain" }
    )
    
    default ResponseEntity<TimeRegistrationsByTaskResponse> getTaskTimeRegistrationsOverview(
        @NotNull @Parameter(name = "date", description = "The date to consider when fetching active tasks and time registrations", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
        @Parameter(name = "period", description = "The time period to use when deciding in which time period tasks are considered active. Defaults to 'WEEK'. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "period", required = false) OverviewPeriod period,
        @Parameter(name = "extraTasks", description = "An optional collection of extra tasks to include in the response, regardless of whether they are active or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "extraTasks", required = false) List<Long> extraTasks
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"taskTimeRegistrations\" : [ { \"task\" : { \"taskDescription\" : \"taskDescription\", \"taskName\" : \"taskName\", \"taskId\" : 0 }, \"dailyRegistrations\" : [ { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] }, { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] } ] }, { \"task\" : { \"taskDescription\" : \"taskDescription\", \"taskName\" : \"taskName\", \"taskId\" : 0 }, \"dailyRegistrations\" : [ { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] }, { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] } ] } ], \"tasklessTimeRegistrations\" : [ { \"taskDescription\" : \"taskDescription\", \"dailyRegistrations\" : [ { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] }, { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] } ] }, { \"taskDescription\" : \"taskDescription\", \"dailyRegistrations\" : [ { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] }, { \"date\" : \"2000-01-23\", \"timeRegistrations\" : [ { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 6, \"description\" : \"description\", \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ] } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /time-registration
     * Returns time registrations that belongs to a user
     *
     * @return List of time registrations for the user (status code 200)
     *         or JWT is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getTimeRegistrationsForUser",
        description = "Returns time registrations that belongs to a user",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of time registrations for the user", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimeRegistrationResponse.class)))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/time-registration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TimeRegistrationResponse>> getTimeRegistrationsForUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23\", \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 0, \"registered\" : 6, \"description\" : \"description\", \"userId\" : 1, \"taskId\" : 5, \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] }, { \"date\" : \"2000-01-23\", \"duration\" : \"PT1H30M\", \"timeRegistrationId\" : 0, \"registered\" : 6, \"description\" : \"description\", \"userId\" : 1, \"taskId\" : 5, \"status\" : null, \"tags\" : [ { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } }, { \"tagConfigurationMetadata\" : { \"tagConfigurationDescription\" : \"tagConfigurationDescription\", \"tagConfigurationId\" : 5, \"tagConfigurationName\" : \"tagConfigurationName\", \"valueType\" : \"STRING\", \"cardinality\" : \"OPTIONAL\" }, \"tagValue\" : { \"tagId\" : 2, \"tagValue\" : \"tagValue\" } } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /time-registration
     * Updates the specified time registration
     *
     * @param timeRegistrationId The id of the time registration to update (required)
     * @param timeRegistrationUpdateRequest  (required)
     * @return Updated (status code 200)
     *         or Bad update request (status code 400)
     *         or JWT is missing or invalid (status code 401)
     *         or Time registration not found (status code 404)
     */
    @Operation(
        operationId = "updateTimeRegistrationForUser",
        description = "Updates the specified time registration",
        tags = { "TimeRegistration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultCreateResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = DefaultCreateResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad update request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "JWT is missing or invalid"),
            @ApiResponse(responseCode = "404", description = "Time registration not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "openId"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/time-registration",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DefaultCreateResponse> updateTimeRegistrationForUser(
        @NotNull @Parameter(name = "timeRegistrationId", description = "The id of the time registration to update", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeRegistrationId", required = true) Long timeRegistrationId,
        @Parameter(name = "TimeRegistrationUpdateRequest", description = "", required = true) @Valid @RequestBody TimeRegistrationUpdateRequest timeRegistrationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 12345, \"status\" : \"The data was created successfully\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
